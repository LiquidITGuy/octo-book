const fetch = require('node-fetch');

// Charger les variables d'environnement
require('dotenv').config();

// Test sans authentification (doit √©chouer)
async function testNotificationWithoutAuth() {
  try {
    console.log('üîí Test sans authentification (doit √©chouer)...');
    
    const response = await fetch('http://localhost:3200/api/push/notify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: 'Test sans auth',
        body: 'Ce test doit √©chouer.',
        bookId: '41'
      })
    });

    const result = await response.json();
    console.log(`‚ùå Status: ${response.status}`);
    console.log('üìÑ R√©ponse:', JSON.stringify(result, null, 2));
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Test avec mauvais mot de passe (doit √©chouer)
async function testNotificationWithWrongPassword() {
  try {
    console.log('üîí Test avec mauvais mot de passe (doit √©chouer)...');
    
    const response = await fetch('http://localhost:3200/api/push/notify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Notification-Password': 'mauvais-mot-de-passe'
      },
      body: JSON.stringify({
        title: 'Test mauvais mot de passe',
        body: 'Ce test doit √©chouer.',
        bookId: '41'
      })
    });

    const result = await response.json();
    console.log(`‚ùå Status: ${response.status}`);
    console.log('üìÑ R√©ponse:', JSON.stringify(result, null, 2));
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Test avec le bon mot de passe (doit r√©ussir)
async function testNotificationWithCorrectPassword() {
  try {
    console.log('‚úÖ Test avec le bon mot de passe (doit r√©ussir)...');
    
    const password = process.env.NOTIFICATION_PASSWORD;
    if (!password) {
      console.error('‚ùå NOTIFICATION_PASSWORD non d√©fini dans .env');
      return;
    }
    
    const response = await fetch('http://localhost:3200/api/push/notify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Notification-Password': password
      },
      body: JSON.stringify({
        title: 'Nouveau livre disponible !',
        body: 'Le livre "Refcard PWA" vient d\'√™tre ajout√© √† la biblioth√®que.',
        bookId: '41'
      })
    });

    if (!response.ok) {
      const errorResult = await response.json();
      console.log(`‚ùå Status: ${response.status}`);
      console.log('üìÑ Erreur:', JSON.stringify(errorResult, null, 2));
      return;
    }

    const result = await response.json();
    console.log('‚úÖ R√©sultat:', JSON.stringify(result, null, 2));
    
    if (result.results.successful > 0) {
      console.log(`üéâ ${result.results.successful} notification(s) envoy√©e(s) avec succ√®s !`);
    } else {
      console.log('‚ö†Ô∏è Aucune notification envoy√©e. V√©rifiez qu\'il y a des abonnements actifs.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Test avec format Bearer (doit r√©ussir)
async function testNotificationWithBearerFormat() {
  try {
    console.log('üîë Test avec format Bearer (doit r√©ussir)...');
    
    const password = process.env.NOTIFICATION_PASSWORD;
    if (!password) {
      console.error('‚ùå NOTIFICATION_PASSWORD non d√©fini dans .env');
      return;
    }
    
    const response = await fetch('http://localhost:3200/api/push/notify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${password}`
      },
      body: JSON.stringify({
        title: 'Test Bearer format',
        body: 'Test avec le format Bearer dans Authorization.',
        bookId: '41'
      })
    });

    if (!response.ok) {
      const errorResult = await response.json();
      console.log(`‚ùå Status: ${response.status}`);
      console.log('üìÑ Erreur:', JSON.stringify(errorResult, null, 2));
      return;
    }

    const result = await response.json();
    console.log('‚úÖ R√©sultat Bearer:', JSON.stringify(result, null, 2));
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test Bearer:', error.message);
  }
}

// V√©rifier les statistiques d'abonnement
async function checkStats() {
  try {
    console.log('üìä V√©rification des statistiques d\'abonnement...');
    
    const response = await fetch('http://localhost:3200/api/push/stats');
    
    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }

    const stats = await response.json();
    console.log('üìà Statistiques:', JSON.stringify(stats, null, 2));
    
    if (stats.totalSubscriptions === 0) {
      console.log('‚ö†Ô∏è Aucun abonnement trouv√©. Abonnez-vous d\'abord via l\'interface web.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des stats:', error.message);
  }
}

// Ex√©cuter les tests de s√©curit√©
async function runSecurityTests() {
  console.log('üöÄ D√©marrage des tests de s√©curit√© pour les notifications push\n');
  
  await checkStats();
  console.log('\n===========================================');
  
  await testNotificationWithoutAuth();
  console.log('\n===========================================');
  
  await testNotificationWithWrongPassword();
  console.log('\n===========================================');
  
  await testNotificationWithCorrectPassword();
  console.log('\n===========================================');
  
  await testNotificationWithBearerFormat();
  console.log('\n===========================================');
  
  console.log('\n‚ú® Tests de s√©curit√© termin√©s !');
  console.log('\nüìã R√©sum√© des tests :');
  console.log('1. ‚ùå Sans authentification ‚Üí Doit √©chouer (401)');
  console.log('2. ‚ùå Mauvais mot de passe ‚Üí Doit √©chouer (401)');
  console.log('3. ‚úÖ Bon mot de passe (X-Notification-Password) ‚Üí Doit r√©ussir');
  console.log('4. ‚úÖ Format Bearer (Authorization) ‚Üí Doit r√©ussir');
  console.log('\nüí° Pour tester compl√®tement avec de vrais abonnements :');
  console.log('1. Ouvrez http://localhost:3200 dans votre navigateur');
  console.log('2. Cliquez sur "Recevoir les notifications" et acceptez les permissions');
  console.log('3. Relancez ce script avec: node test-notification.js');
}

runSecurityTests();
